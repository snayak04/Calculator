{"version":3,"sources":["modules/Screen.js","modules/Btns.js","modules/ButtonList.js","containers/App.js","serviceWorker.js","index.js"],"names":["Screen","props","react_default","a","createElement","className","type","placeholder","text","value","Btns","onClick","click","OperatorBtns","Equals","Cancel","ButtonList","Btns_Btns","clicked","operator","Btns_Cancel","cancel","Btns_OperatorBtns","Btns_Equals","equal","Parser","require","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","append","str","inputField","state","setState","handleNumbers","e","target","handleOperator","lastChar","charAt","length","console","log","isNaN","hasDecimal","handleEquals","answer","String","evaluate","handleCancel","modules_Screen","modules_ButtonList","Component","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.69151072.chunk.js","sourcesContent":["import React from 'react';\n\nconst Screen = (props) => {\n    return(\n        <div className=\"fl w-100\">\n            <input type=\"text\" \n            placeholder={props.text}\n            value={props.text}\n            className=\"dib pa3 ma2 bg-light-gray ba2 fl w-100\"/>\n        </div>\n    );\n}\nexport default Screen;","import React from 'react';\n\nexport const Btns = (props) =>{\n    return(\n        <div>\n            <button className=\"bg-light-gray br3 grow shadow-5 bw2 fl w-third pa2 f1\" onClick={props.click} value={props.value}>{props.value}</button>\n        </div>\n    );\n}\nexport const OperatorBtns = (props) => {\n        return (\n        <div>\n            <button className=\"dp bg-gray br3 grow shadow-5 bw2 fl w-100 pa2 f1\" onClick={props.click} value={props.value}>{props.value}</button>\n        </div>\n        );\n}\n\nexport const Equals = (props) => {\n    return (\n        <div>\n            <button className=\"dp bg-green br3 grow shadow-5 bw2 fl w-100 pa2 f1\" onClick={props.click}>=</button>\n        </div>\n        );\n}\nexport const Cancel = (props) => {\n    return (\n        <div>\n            <button className=\"dp bg-red br3 grow shadow-5 bw2 fl w-third pa2 f1\" onClick={props.click} value=\"C\">C</button>\n        </div>\n        );\n}\n\n","import React from 'react';\nimport {Btns, OperatorBtns, Equals, Cancel} from './Btns';\n\nconst ButtonList = (props) => {\n    \n    return(\n        <div>\n            <div className=\"fl w-60\">\n                <Btns value=\"7\" click={props.clicked}/>\n                <Btns value=\"8\" click={props.clicked}/>\n                <Btns value=\"9\" click={props.clicked}/>\n            \n                <Btns value=\"4\" click={props.clicked}/>\n                <Btns value=\"5\" click={props.clicked}/>\n                <Btns value=\"6\" click={props.clicked}/>\n                <Btns value=\"1\" click={props.clicked}/>\n                <Btns value=\"2\" click={props.clicked}/>\n                <Btns value=\"3\" click={props.clicked}/>\n                <Btns value=\"0\" click={props.clicked}/>\n                <Btns value=\".\" click={props.operator}/>\n                <Cancel value=\"C\" click={props.cancel}/>\n            </div>\n            <div className=\"fl w-20\">\n                <OperatorBtns value=\"+\" click={props.operator}/>\n                <OperatorBtns value=\"-\" click={props.operator}/>\n                <OperatorBtns value=\"/\" click={props.operator}/>\n                <OperatorBtns value=\"*\" click={props.operator}/>\n            </div>\n            <div className=\"fl w-20\">\n                <OperatorBtns value=\"!\" click={props.operator}/>\n                <OperatorBtns value=\"&nbsp;\" click={props.operator}/>\n                <OperatorBtns value=\"%\" click={props.operator}/>\n                <OperatorBtns value=\"^\" click={props.operator}/>\n            </div>\n            <div className=\"fl w-100\">\n                <Equals value=\"=\" click={props.equal}/>\n            </div>\n        </div>\n    );\n}\nexport default ButtonList;","import React, {Component} from 'react';\nimport Screen from '../modules/Screen';\nimport ButtonList from '../modules/ButtonList';\nvar Parser = require('expr-eval').Parser;\n\nclass App extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            inputField:\"\",\n            hasDecimal: false,\n        };\n    }\n    append = (str) => {\n        var inputField = this.state.inputField;\n        this.setState({inputField:inputField+str});\n    }\n    handleNumbers = (e) => {\n    //    var val = ButtonHandler(e);\n        this.append(e.target.value);\n    }\n    handleOperator = (e) => {\n        var lastChar = (this.state.inputField.charAt(this.state.inputField.length-1));\n        console.log(isNaN(lastChar));\n        if(!isNaN(lastChar))\n            if(e.target.value === \".\"){\n                    if(!this.state.hasDecimal){\n                        this.append(e.target.value);\n                        this.setState({hasDecimal: true});\n                    }\n        }else{\n            this.append(e.target.value);\n            this.setState({hasDecimal: false});\n        }\n        //Check if the last character is an operator if not proceed.\n    }\n    handleEquals = () => {\n        //Execute or evaluate the expression.\n        if(this.state.inputField.length>1){\n        var answer = String(Parser.evaluate(this.state.inputField));\n        this.setState({inputField: answer});\n        this.setState({hasDecimal:false});\n        }\n    }\n    handleCancel = () => {\n        //Reset the inputField\n        this.setState({inputField:\"\"});\n        this.setState({hasDecimal:false});\n        console.log(\"triggered\");\n    }\n    render(){\n        return (\n            <div className=\"tc\">\n                <div className=\"pa3 f2 bg-light-gray\">\n                    <h1>The Calculator</h1>\n                </div>\n                <div className=\"cf-ns nl2 nr2\">\n                    <div className=\"fl-ns w-20-ns ph2\">&nbsp;</div>\n                    <div className=\"fl-ns w-60-ns ph2\">\n                        <Screen text={this.state.inputField} />\n                        <div className=\"\">\n                            <ButtonList clicked={this.handleNumbers} operator={this.handleOperator} equal={this.handleEquals} cancel={this.handleCancel}/>\n                        </div>\n                    </div>\n                </div>\n               \n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { createStore } from 'redux'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}